// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gateway.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PushMsgReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMsgReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushMsgReqMultiError, or
// nil if none found.
func (m *PushMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushMsgReqValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushMsgReqValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushMsgReqValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushMsgReqMultiError(errors)
	}

	return nil
}

// PushMsgReqMultiError is an error wrapping multiple validation errors
// returned by PushMsgReq.ValidateAll() if the designated constraints aren't met.
type PushMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMsgReqMultiError) AllErrors() []error { return m }

// PushMsgReqValidationError is the validation error returned by
// PushMsgReq.Validate if the designated constraints aren't met.
type PushMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMsgReqValidationError) ErrorName() string { return "PushMsgReqValidationError" }

// Error satisfies the builtin error interface
func (e PushMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMsgReqValidationError{}

// Validate checks the field values on PushMsgResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMsgResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMsgResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushMsgRespMultiError, or
// nil if none found.
func (m *PushMsgResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMsgResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushMsgRespMultiError(errors)
	}

	return nil
}

// PushMsgRespMultiError is an error wrapping multiple validation errors
// returned by PushMsgResp.ValidateAll() if the designated constraints aren't met.
type PushMsgRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMsgRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMsgRespMultiError) AllErrors() []error { return m }

// PushMsgRespValidationError is the validation error returned by
// PushMsgResp.Validate if the designated constraints aren't met.
type PushMsgRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMsgRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMsgRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMsgRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMsgRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMsgRespValidationError) ErrorName() string { return "PushMsgRespValidationError" }

// Error satisfies the builtin error interface
func (e PushMsgRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMsgResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMsgRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMsgRespValidationError{}

// Validate checks the field values on Input with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Input) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Input with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InputMultiError, or nil if none found.
func (m *Input) ValidateAll() error {
	return m.validate(true)
}

func (m *Input) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Data

	if len(errors) > 0 {
		return InputMultiError(errors)
	}

	return nil
}

// InputMultiError is an error wrapping multiple validation errors returned by
// Input.ValidateAll() if the designated constraints aren't met.
type InputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputMultiError) AllErrors() []error { return m }

// InputValidationError is the validation error returned by Input.Validate if
// the designated constraints aren't met.
type InputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputValidationError) ErrorName() string { return "InputValidationError" }

// Error satisfies the builtin error interface
func (e InputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputValidationError{}

// Validate checks the field values on Output with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Output) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Output with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OutputMultiError, or nil if none found.
func (m *Output) ValidateAll() error {
	return m.validate(true)
}

func (m *Output) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Data

	if len(errors) > 0 {
		return OutputMultiError(errors)
	}

	return nil
}

// OutputMultiError is an error wrapping multiple validation errors returned by
// Output.ValidateAll() if the designated constraints aren't met.
type OutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputMultiError) AllErrors() []error { return m }

// OutputValidationError is the validation error returned by Output.Validate if
// the designated constraints aren't met.
type OutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputValidationError) ErrorName() string { return "OutputValidationError" }

// Error satisfies the builtin error interface
func (e OutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputValidationError{}
